--- components/volume.c
+++ components/volume.c
@@ -72,6 +72,50 @@
 
                return bprintf("%d", m ? 0 : v * 100 / 255);
        }
+#elif defined(__linux__)
+       #include <alsa/asoundlib.h>
+       #include <alsa/mixer.h>
+
+       const char *
+       vol_perc(const char * card)
+       {
+               long minv, maxv, outvol;
+               snd_mixer_t* handle;
+               snd_mixer_elem_t* elem;
+               snd_mixer_selem_id_t* sid;
+
+               static const char* mix_name = "Master";
+               static int mix_index = 0;
+
+               snd_mixer_selem_id_alloca(&sid);
+
+               /* sets simple-mixer index and name */
+               snd_mixer_selem_id_set_index(sid, mix_index);
+               snd_mixer_selem_id_set_name(sid, mix_name);
+
+               if (snd_mixer_open(&handle, 0) < 0)
+                       return NULL;
+
+               if (snd_mixer_attach(handle, card) < 0) goto error;
+
+               if (snd_mixer_selem_register(handle, NULL, NULL) < 0) goto error;
+
+               if (snd_mixer_load(handle) < 0) goto error;
+
+               elem = snd_mixer_find_selem(handle, sid);
+               if (!elem) goto error;
+
+               snd_mixer_selem_get_playback_volume_range(elem, &minv, &maxv);
+
+               if(snd_mixer_selem_get_playback_volume(elem, 0, &outvol) < 0) goto error;
+
+               snd_mixer_close(handle);
+               return bprintf("%ld", (100 * (outvol - minv)) / (maxv - minv));
+
+error:
+               snd_mixer_close(handle);
+               return NULL;
+       }
 #else
        #include <sys/soundcard.h>
 
